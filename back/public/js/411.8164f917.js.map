{"version":3,"file":"js/411.8164f917.js","mappings":"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","sources":["webpack://front/./src/pages/gundam/GundamTcgTest.vue","webpack://front/./src/games/game.vue","webpack://front/./src/games/gameTask.js","webpack://front/./src/games/global.js","webpack://front/./src/games/positioner.js","webpack://front/./src/games/gameManager.js","webpack://front/./src/games/card.vue","webpack://front/src/games/card.vue","webpack://front/./src/games/card.vue?5ce6","webpack://front/./src/games/card.vue?5060","webpack://front/src/games/game.vue","webpack://front/./src/games/game.vue?bd72","webpack://front/./src/games/game.vue?3190","webpack://front/src/pages/gundam/GundamTcgTest.vue","webpack://front/./src/pages/gundam/GundamTcgTest.vue?b0d7","webpack://front/./src/pages/gundam/GundamTcgTest.vue?6fc7"],"sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"bg2 h100p\"},[_c('menu-bar-gundam',{attrs:{\"hide\":true}}),_c('game')],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{key:_vm.refreshG,staticClass:\"relative w100p h100p mask\"},[_c('div',{staticClass:\"hide\"},[_vm._l((16),function(i){return _c('div',{key:'x' + i,staticClass:\"bgYellow absolute w100p\",style:({ height: _vm.game?.grid.box.height + 'px', top: _vm.getGridY(i - 1) + 'px' })})}),_vm._l((16),function(i){return _c('div',{key:'y' + i,staticClass:\"bgRed absolute h100p\",style:({ width: _vm.game?.grid.box.width + 'px', left: _vm.getGridX(i - 1) + 'px' })})})],2),_vm._l((_vm.game?.fields),function(box){return _c('div',{key:box.name,staticClass:\"absolute bg\",style:(_vm.getFieldStyle(box.x, box.y, box.width, box.height)),attrs:{\"id\":box.name},on:{\"dragover\":_vm.onDragOver,\"drop\":function($event){return _vm.onDrop($event, box)}}},[_vm._v(\" \"+_vm._s(box.zone)+\" \")])}),(_vm.aside)?_c('div',{staticClass:\"flex absolute\"},[_c('div',{staticClass:\"bg\",staticStyle:{\"width\":\"300px\",\"height\":\"100%\"}},[_c('div',{staticClass:\"relative\"},[_c('gameCard',{attrs:{\"card\":_vm.cardCenter,\"folder\":\"Gundam/cards/\"}})],1),_c('div',{staticStyle:{\"height\":\"420px\"}}),_c('v-btn',{staticClass:\"bg m5px\",attrs:{\"target\":\"_blank\",\"text\":\"\"},on:{\"click\":_vm.start}},[_c('v-icon',[_vm._v(\"mdi-arrow-right-thin\")]),_vm._v(\" Start \")],1),_c('v-btn',{staticClass:\"bg m5px\",attrs:{\"target\":\"_blank\",\"text\":\"\"},on:{\"click\":_vm.nextTurn}},[_c('v-icon',[_vm._v(\"mdi-arrow-right-thin\")]),_vm._v(\" End Turn \")],1),_c('div',{staticClass:\"mp5px\",domProps:{\"innerHTML\":_vm._s(_vm.game?.logs)}})],1)]):_vm._e(),_vm._l((_vm.cards),function(card){return _c('div',{key:'B' + card.index,on:{\"dragover\":_vm.onDragOver,\"drop\":function($event){return _vm.onDrop($event, card)}}},[_c('gameCard',{attrs:{\"id\":'C' + card.index,\"card\":card,\"folder\":\"Gundam/cards/\",\"shine\":card.selectable,\"draggable\":\"true\"},on:{\"mouseover\":function($event){return _vm.showCardMouseOver(card)},\"click\":function($event){return _vm.showCard(card)},\"dragover\":_vm.onDragOver,\"drop\":function($event){return _vm.onDrop($event, card)}}})],1)}),_c('div',{staticClass:\"absolute bgWhite mask\",staticStyle:{\"top\":\"80px\",\"width\":\"100%\",\"height\":\"0px\"},attrs:{\"id\":\"divTitleParent\"}},[_c('div',{staticClass:\"relative\"},[_c('div',{staticClass:\"text-center absolute w100p title\",staticStyle:{\"left\":\"-000px\",\"top\":\"30px\"}},[_vm._v(_vm._s(_vm.title)+\" \")])])]),_c('gameCard',{attrs:{\"id\":\"cardCenter\",\"card\":_vm.cardCenter,\"folder\":\"Gundam/cards/\"},on:{\"click\":function($event){return _vm.showCard(null)}}})],2)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","class gameTask {\r\n\r\n    static task = {\r\n        refreshHand: 0,\r\n        refreshField: 1\r\n    };\r\n\r\n    static addTasks(list, tasks){\r\n        tasks.forEach(task => {\r\n           if(!this.alreadyInclude(list, task)) \r\n                list.push(task);\r\n        });\r\n    }\r\n\r\n    static alreadyInclude(list, task){\r\n        return list.find(x=> this.isEqual(x, task));\r\n    }\r\n    static isEqual(task1, task2){\r\n        return task1.task === task2.task && task1.isPlayer1 === task1.isPlayer1;\r\n    }\r\n\r\n    static refreshHand(isPlayer1=true) {return {'task':this.task.refreshHand, 'isPlayer1': isPlayer1}; }\r\n    static refreshField(isPlayer1=true) {return {'task':this.task.refreshField, 'isPlayer1': isPlayer1}; }\r\n}\r\n\r\n\r\nexport default gameTask;\r\n","class global {\r\n    static game = null;\r\n    static grid;\r\n    static index = 1;\r\n    static isPlayer1Turn;\r\n\r\n    static phase = 0;\r\n    static phaseStart = 0;\r\n    static phaseDraw = 1;\r\n    static phaseResource = 2;\r\n    static phaseMain = 3;\r\n    static phaseAttack = 4;\r\n    static phaseBlock = 5;\r\n    static phaseAction = 6;\r\n    static phaseDamage = 7;\r\n    static phaseEnd = 8;\r\n\r\n    static locationDeck = 0;\r\n    static locationShield = 1;\r\n    static locationHand = 2;\r\n    static locationField = 3;\r\n    static locationBase = 4;\r\n    static locationTrash = 5;\r\n    static locationResource = 6;\r\n\r\n    static getLocationArrayProperty(location){\r\n        if(location == this.locationDeck) return 'deck';\r\n        else if(location == this.locationShield) return 'shield';\r\n        else if(location == this.locationHand) return 'hand';\r\n        else if(location == this.locationField) return 'field';\r\n        else if(location == this.locationBase) return 'base';\r\n        else if(location == this.locationResource) return 'resource';\r\n        return 'trash';\r\n    }\r\n\r\n    static getNextIndex(){\r\n        this.index++;\r\n        return this.index;\r\n    }\r\n\r\n    static removeByIndex(array, card){\r\n        return array.filter(x=> x.index !== card.index);\r\n    }\r\n\r\n    static addIn(array, card){\r\n        if(array && !array.includes(x=> x.index === card.index))\r\n            return array.concat([card]);\r\n    }\r\n\r\n    static sortRandom(cards) { return cards.sort(() => Math.random() - 0.5); }\r\n\r\n    static log(text) { this.world.logs = text + '<br>' + this.world.logs; }\r\n\r\n    static clone(obj) { return Object.assign({}, obj); }\r\n}\r\n\r\n\r\nexport default global;\r\n","import global from './global';\r\n\r\nclass positioner {\r\n\r\n    static createGrid(width, height) {\r\n        const grid = {};\r\n        grid.width = width;\r\n        grid.height = height;\r\n        grid.border = 5;\r\n        const divide = 16;\r\n        grid.widthB = grid.width - (grid.border * (divide + 1));\r\n        grid.heightB = grid.height - grid.border * (divide + 1);\r\n\r\n        grid.center = { height: grid.heightB - 2 * grid.border, y: grid.border };\r\n        grid.center.width = grid.center.height * 107 / 150;\r\n        grid.center.x = grid.widthB / 2 - grid.center.width / 2;\r\n        if (grid.center.width > grid.width - 10) {\r\n            grid.center.width = grid.width - 10;\r\n            grid.center.height = grid.center.width * 150 / 107;\r\n            grid.center.x = 5;\r\n        }\r\n\r\n        grid.box = { height: grid.heightB / divide };\r\n        grid.box.width = grid.widthB / divide;\r\n        grid.boxbig = { height: 2 * grid.box.height + grid.border, width: 2 * grid.box.width + grid.border };\r\n        grid.hand = { width: (grid.box.width + grid.border) * divide - grid.border, height: 3 * (grid.box.height + grid.border) - grid.border };\r\n        grid.hand.cardWidth = grid.hand.width / 11;\r\n        grid.hand.cardHeight = grid.hand.cardWidth * 150 / 107;\r\n        grid.field = { width: grid.hand.width - grid.box.width - grid.border, height: grid.hand.height + 2 * (grid.box.height + grid.border) };\r\n        grid.field.cardHeight = grid.field.height * 0.75;\r\n        grid.field.cardWidth = grid.field.cardHeight * 150 / 107;\r\n        if (grid.field.cardWidth > grid.field.width / 6) {\r\n            grid.field.cardWidth = grid.field.width / 6;\r\n            grid.field.cardHeight = grid.field.cardWidth * 150 / 107;\r\n        }\r\n\r\n        grid.card = { height: grid.field.height * 0.75 };\r\n        grid.card.width = grid.card.height * 107 / 150;\r\n\r\n        for (let i = 0; i < divide; i++) {\r\n            grid['x' + i] = 5 + (i * (grid.box.width + 5));\r\n            grid['y' + i] = 5 + (i * (grid.box.height + 5));\r\n        }\r\n\r\n        return grid;\r\n    }\r\n\r\n\r\n    static getPositions(grid, isPlayer1) {\r\n        if (grid.box.width > 50)\r\n            return {\r\n                base: this.createPoint(isPlayer1, grid.x15, grid.y8, grid.x0, grid.y7, grid.box.width, grid.box.height, 'base', global.locationBase),\r\n                shield: this.createPoint(isPlayer1, grid.x15, grid.y9, grid.x0, grid.y6, grid.box.width, grid.box.height, 'shield', global.locationShield),\r\n                deck: this.createPoint(isPlayer1, grid.x15, grid.y10, grid.x0, grid.y5, grid.box.width, grid.box.height, 'deck', global.locationDeck),\r\n                trash: this.createPoint(isPlayer1, grid.x15, grid.y11, grid.x0, grid.y4, grid.box.width, grid.box.height, 'trash', global.locationTrash),\r\n                resource: this.createPoint(isPlayer1, grid.x15, grid.y12, grid.x0, grid.y3, grid.box.width, grid.box.height, 'res', global.locationResource),\r\n                hand: this.createPoint(isPlayer1, grid.x0, grid.y13, grid.x0, grid.y0, grid.hand.width, grid.hand.height, 'hand', global.locationHand),\r\n                field: this.createPoint(isPlayer1, grid.x0, grid.y8, grid.x1, grid.y3, grid.field.width, grid.field.height, 'field', global.locationField)\r\n            };\r\n        else\r\n            return {\r\n                base: this.createPoint(isPlayer1, grid.x14, grid.y8, grid.x0, grid.y7, grid.box.width * 2, grid.box.height, 'base', global.locationBase),\r\n                shield: this.createPoint(isPlayer1, grid.x14, grid.y9, grid.x0, grid.y6, grid.box.width * 2, grid.box.height, 'shield', global.locationShield),\r\n                deck: this.createPoint(isPlayer1, grid.x14, grid.y10, grid.x0, grid.y5, grid.box.width * 2, grid.box.height, 'deck', global.locationDeck),\r\n                trash: this.createPoint(isPlayer1, grid.x14, grid.y11, grid.x0, grid.y4, grid.box.width * 2, grid.box.height, 'trash', global.locationTrash),\r\n                resource: this.createPoint(isPlayer1, grid.x14, grid.y12, grid.x0, grid.y3, grid.box.width * 2, grid.box.height, 'res', global.locationResource),\r\n                hand: this.createPoint(isPlayer1, grid.x0, grid.y13, grid.x0, grid.y0, grid.hand.width, grid.hand.height, 'hand', global.locationHand),\r\n                field: this.createPoint(isPlayer1, grid.x0, grid.y8, grid.x2, grid.y3, grid.field.width - 5 - grid.box.width, grid.field.height, 'field', global.locationField)\r\n            };\r\n    }\r\n\r\n    static createPoint(isPlayer1, x1, y1, x2, y2, width, height, zone, location) {\r\n        const index = isPlayer1 ? '1' : '2';\r\n        return {\r\n            x: isPlayer1 ? x1 : x2,\r\n            y: isPlayer1 ? y1 : y2,\r\n            zone: zone + index,\r\n            width, height, location\r\n        };\r\n    }\r\n\r\n    static createField(p1, p2) {\r\n        let result = [p1.deck, p1.trash, p1.shield, p1.resource, p1.hand, p1.field, p1.base]\r\n            .concat([p2.deck, p2.trash, p2.shield, p2.resource, p2.hand, p2.field, p2.base]);\r\n        return result;\r\n    }\r\n\r\n    static refresh(player, cards, location) {\r\n        if (location !== global.locationHand && location !== global.locationField)\r\n            return;\r\n\r\n        const isHand = location === global.locationHand;\r\n        const position = isHand ? global.clone(player.positions.hand) : global.clone(player.positions.field);\r\n        if(!isHand) position.height*=0.75;\r\n        const cardSize = this.getCardSize(position.width, position.height, cards.length);\r\n        cards.forEach((card, index) => {\r\n            card.position = isHand ? this.getPositionHand(player, index, cards.length, cardSize)\r\n                : this.getPositionField(player, index, cards.length, cardSize);\r\n            card.to = isHand ? this.getPositionHand(player, index, cards.length, cardSize)\r\n                : this.getPositionField(player, index, cards.length, cardSize);\r\n        });\r\n    }\r\n\r\n    static getCardSize(width, height, count) {\r\n        let desiredWidth = width / (count+0.25);\r\n        let desiredHeight = desiredWidth * 150 / 107;\r\n        if (desiredHeight > height) {\r\n            desiredHeight = height;\r\n            desiredWidth = desiredHeight * 107 / 150;\r\n        }\r\n        return { width: desiredWidth, height: desiredHeight };\r\n    }\r\n\r\n    static getPositionHand(player, index, total, cardSize) {\r\n        return {\r\n            x: player.positions.hand.x + this.getXCenter(player.positions.hand.width, cardSize.width, total, index),\r\n            y: player.positions.hand.y,\r\n            width: cardSize.width,\r\n            height: cardSize.height\r\n        };\r\n    }\r\n\r\n    static getPositionField(player, index, total, cardSize) {\r\n        return {\r\n            x: player.positions.field.x + this.getXCenter(player.positions.field.width, cardSize.width, total, index),\r\n            y: player.positions.field.y,\r\n            width: cardSize.width,\r\n            height: cardSize.height\r\n        };\r\n    }\r\n\r\n    static getPositionHandWithRotation(player, card, index, total) {\r\n        const cardWidth = global.grid.card.width * 0.75;\r\n        const cardWidthHalf = cardWidth / 2;\r\n        const sens = index < total / 2 ? -1 : 1;\r\n        let factorRotation = 0;\r\n        let mid = total / 2;\r\n        let x = 0;\r\n\r\n        if (this.isPair(total)) {\r\n            const midX = global.grid.hand.width / 2 - cardWidthHalf + (cardWidthHalf * sens);\r\n            mid = index < total / 2 ? Math.floor(total / 2) - 1 : Math.ceil(total / 2);\r\n            x = midX + (Math.abs(mid - index) * cardWidth * sens);\r\n        } else {\r\n            const midX = global.grid.hand.width / 2 - cardWidthHalf;\r\n            x = midX + (Math.abs(mid - index) * cardWidth * sens);\r\n        }\r\n\r\n        const playerSens = player.isPlayer1 ? 1 : -1;\r\n        factorRotation = index - mid;\r\n        const rotation = playerSens * Math.round(20 * (factorRotation / mid));\r\n        const heightIncruise = playerSens * (cardWidth / 4) * Math.abs(mid - index);\r\n\r\n        card.ap = index;\r\n        card.hp = mid;\r\n\r\n        const result = {\r\n            x: player.positions.hand.x + x,\r\n            y: player.positions.hand.y + heightIncruise + 20,\r\n            width: global.grid.card.width,\r\n            height: global.grid.card.height,\r\n            rotation\r\n        };\r\n        return result;\r\n    }\r\n\r\n    static isPair(x) { return x % 2 == 0 }\r\n\r\n    static getCenter(totalWidth, elementWidth, total, index) {\r\n        const halfWidth = totalWidth / 2;\r\n        const half = total / 2;\r\n        const indexCenter = half - index;\r\n        return halfWidth - indexCenter * elementWidth;\r\n    }\r\n\r\n    static getXCenter(totalWidth, elementWidth, total, index) {\r\n        const sizeWidth = totalWidth / total;\r\n        return sizeWidth / 2 + sizeWidth * index - elementWidth / 2;\r\n    }\r\n}\r\n\r\n\r\nexport default positioner;\r\n","import gameTask from './gameTask';\r\nimport positioner from './positioner';\r\nimport global from './global';\r\n\r\nclass gameManager {\r\n\r\n    static createGame(manager, width, height) {\r\n        global.game = {cards:[], tasks:[], popup:[]};\r\n        global.cards = manager.getCards();\r\n        gameTask.addTasks(global.game.tasks, [gameTask.refreshHand(true), gameTask.refreshHand(false)]);\r\n        this.nextTurn();\r\n\r\n        global.grid = positioner.createGrid(width, height);\r\n        global.game.grid = global.grid;\r\n\r\n        global.game.player1 = {deck:[], shield:[], hand:[], field:[], trash:[], isPlayer1:true};\r\n        global.game.player2 = {deck:[], shield:[], hand:[], field:[], trash:[], isPlayer1:false};\r\n\r\n        global.game.player1.positions = positioner.getPositions(global.grid, true);\r\n        global.game.player2.positions = positioner.getPositions(global.grid, false);\r\n\r\n        global.game.fields = positioner.createField(global.game.player1.positions, global.game.player2.positions);\r\n\r\n        for(let i=0; i<5; i++){\r\n            this.spawn(global.game.player1, this.createCard('GD01-028'), global.locationDeck, global.locationHand, true);\r\n            this.spawn(global.game.player2, this.createCard('GD01-028'), global.locationDeck, global.locationHand, true);\r\n            this.spawn(global.game.player2, this.createCard('GD01-028'), global.locationDeck, global.locationField, true);\r\n        }\r\n        \r\n        this.spawn(global.game.player1, this.createCard('GD01-028'), global.locationDeck, global.locationHand, true);\r\n        \r\n        positioner.refresh(global.game.player1, global.game.player1.hand, global.locationHand);\r\n        positioner.refresh(global.game.player2, global.game.player2.hand, global.locationHand);\r\n        positioner.refresh(global.game.player1, global.game.player1.field, global.locationField);\r\n        positioner.refresh(global.game.player2, global.game.player2.field, global.locationField);\r\n\r\n        return global.game;\r\n    }\r\n\r\n    static createCard(id){\r\n        const card = global.clone(global.cards.find(x => x.id === id));\r\n        card.index= global.getNextIndex();\r\n        return card;\r\n    }\r\n\r\n    static spawn(player, card, locationFrom, locationTo, ignore){\r\n        const from = global.getLocationArrayProperty(locationFrom);\r\n        const to = global.getLocationArrayProperty(locationTo);\r\n\r\n        player[from] = global.removeByIndex(player[from], card.index);\r\n        player[to] = global.addIn(player[to], card);\r\n\r\n        global.game.cards = global.addIn(global.game.cards, card);\r\n        \r\n        if(!ignore){\r\n            positioner.refresh(player, player[from], locationFrom);\r\n            positioner.refresh(player, player[to], locationTo);\r\n        }\r\n    }\r\n\r\n    static nextTurn() {\r\n        //console.log('test');\r\n    }\r\n}\r\n\r\n\r\nexport default gameManager;\r\n","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"absolute bgYellow\",style:({\n  left: _vm.card.position.x + 'px',\n  top: _vm.card.position.y + 'px',\n  width: _vm.card.position.width + 'px',\n  height: _vm.card.position.height + 'px',\n  transform: 'rotate(' + _vm.card.position.rotation + 'deg)',\n  'z-index': _vm.card.zindex,\n  cursor: _vm.shine ? 'pointer' :''\n}),on:{\"click\":function($event){return _vm.$emit('click', _vm.card)}}},[(!_vm.card)?_c('div',[_vm._v(\"No card\")]):_c('img',{class:{ shine: _vm.shine, w100p: true, h100p: true },style:({ 'object-fit': 'cover', 'object-position': _vm.card.bgposition, 'pointer-events':'none' }),attrs:{\"draggable\":\"false\",\"src\":require('@/assets/' + _vm.folder + _vm.card.id + '.webp')},on:{\"mouseover\":function($event){return _vm.$emit('mouseover', _vm.card)},\"contextmenu\":function($event){$event.preventDefault();return _vm.$emit('clickright', _vm.card)}}}),(!_vm.hidestat && (_vm.card.ap || _vm.card.hp))?_c('div',{staticClass:\"absolute bg cirlce10px textVerticalCenter\",staticStyle:{\"width\":\"25px\",\"height\":\"20px\",\"top\":\"-5px\",\"right\":\"-5px\",\"font-size\":\"8px\"}},[_vm._v(\" \"+_vm._s(_vm.card.ap)+\" - \"+_vm._s(_vm.card.hp)+\" \")]):_vm._e()])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n    <div class=\"absolute bgYellow\" @click=\"$emit('click', card)\" :style=\"{\r\n      left: card.position.x + 'px',\r\n      top: card.position.y + 'px',\r\n      width: card.position.width + 'px',\r\n      height: card.position.height + 'px',\r\n      transform: 'rotate(' + card.position.rotation + 'deg)',\r\n      'z-index': card.zindex,\r\n      cursor: shine ? 'pointer' :''\r\n    }\">\r\n      <div v-if=\"!card\">No card</div>\r\n      <img v-else :class=\"{ shine: shine, w100p: true, h100p: true }\" draggable=\"false\"\r\n        :style=\"{ 'object-fit': 'cover', 'object-position': card.bgposition, 'pointer-events':'none' }\"\r\n        :src=\"require('@/assets/' + folder + card.id + '.webp')\" @mouseover=\"$emit('mouseover', card)\"\r\n         @contextmenu.prevent=\"$emit('clickright', card)\" />\r\n        <div v-if=\"!hidestat && (card.ap || card.hp)\" class=\"absolute bg cirlce10px textVerticalCenter\" style=\"width:25px; height:20px; top:-5px; right:-5px; font-size:8px\">\r\n          {{card.ap}} - {{card.hp}}\r\n        </div>\r\n    </div>\r\n  </template>\r\n  \r\n  <style scoped>\r\n  </style>\r\n  \r\n  <script>\r\n  export default {\r\n    name: 'game-card',\r\n    props: ['card', 'folder', 'shine', 'hidestat']\r\n  }\r\n  </script>\r\n  ","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./card.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./card.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./card.vue?vue&type=template&id=7fe7a5b2&scoped=true&\"\nimport script from \"./card.vue?vue&type=script&lang=js&\"\nexport * from \"./card.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"7fe7a5b2\",\n  null\n  \n)\n\nexport default component.exports","<template>\r\n    <div class=\"relative w100p h100p mask\" :key=\"refreshG\">\r\n\r\n        <!-- Grid -->\r\n        <div class=\"hide\">\r\n            <div v-for=\"i in 16\" :key=\"'x' + i\"\r\n                :style=\"{ height: game?.grid.box.height + 'px', top: getGridY(i - 1) + 'px' }\"\r\n                class=\"bgYellow absolute w100p\"></div>\r\n            <div v-for=\"i in 16\" :key=\"'y' + i\"\r\n                :style=\"{ width: game?.grid.box.width + 'px', left: getGridX(i - 1) + 'px' }\"\r\n                class=\"bgRed absolute h100p\">\r\n            </div>\r\n        </div>\r\n\r\n        <!-- field -->\r\n        <div v-for=\"box in game?.fields\" :key=\"box.name\" :id=\"box.name\" class=\"absolute bg\" @dragover=\"onDragOver\"\r\n            @drop=\"onDrop($event, box)\" :style=\"getFieldStyle(box.x, box.y, box.width, box.height)\">\r\n            {{ box.zone }}\r\n        </div>\r\n\r\n        <!-- Show card -->\r\n        <div class=\"flex absolute\" v-if=\"aside\">\r\n            <div class=\"bg\" style=\"width:300px; height:100%;\">\r\n                <div class=\"relative\">\r\n                    <gameCard :card=\"cardCenter\" folder=\"Gundam/cards/\"></gameCard>\r\n                </div>\r\n                <div style=\"height:420px\"></div>\r\n                <v-btn target=\"_blank\" text class=\"bg m5px\" @click=\"start\">\r\n                    <v-icon>mdi-arrow-right-thin</v-icon>\r\n                    Start\r\n                </v-btn>\r\n                <v-btn target=\"_blank\" text class=\"bg m5px\" @click=\"nextTurn\">\r\n                    <v-icon>mdi-arrow-right-thin</v-icon>\r\n                    End Turn\r\n                </v-btn>\r\n                <div class=\"mp5px\" v-html=\"game?.logs\"></div>\r\n            </div>\r\n        </div>\r\n\r\n        <!-- cards -->\r\n        <div v-for=\"card in cards\" :key=\"'B' + card.index\" @dragover=\"onDragOver\" @drop=\"onDrop($event, card)\">\r\n            <gameCard :id=\"'C' + card.index\" :card=\"card\" folder=\"Gundam/cards/\" :shine=\"card.selectable\"\r\n                @mouseover=\"showCardMouseOver(card)\" @click=\"showCard(card)\" @dragover=\"onDragOver\"\r\n                @drop=\"onDrop($event, card)\" draggable=\"true\">\r\n            </gameCard>\r\n        </div>\r\n\r\n        <!-- Title -->\r\n        <div id=\"divTitleParent\" class=\"absolute bgWhite mask\" style=\"top:80px; width: 100%; height:0px;\">\r\n            <div class=\"relative\">\r\n                <div class=\"text-center absolute w100p title\" style=\"left:-000px; top:30px;\">{{ title }}\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <!-- Card center -->\r\n        <gameCard id=\"cardCenter\" :card=\"cardCenter\" folder=\"Gundam/cards/\" @click=\"showCard(null)\">\r\n        </gameCard>\r\n    </div>\r\n\r\n</template>\r\n\r\n<style scoped>\r\nhtml,\r\nbody {\r\n    overflow: hidden;\r\n}\r\nbody {\r\n    position: relative;\r\n}\r\n</style>\r\n\r\n<script>\r\nimport helperAnimation from '../helpers/helperAnimation';\r\nimport gameManager from './gameManager';\r\nimport gundamManager from './gundamold/manager';\r\nimport gameCard from './card';\r\n\r\nexport default {\r\n    name: 'game-vue',\r\n    props: [],\r\n    components: { gameCard },\r\n    data: () => ({\r\n        refreshG: 0,\r\n        aside: false,\r\n        freeze: false,\r\n        cards: [],\r\n        cardCenter: { id: 'GD01-028', position: { width: 0 } },\r\n        game: null,\r\n        title: '',\r\n    }),\r\n    mounted() {\r\n        document.body.style.overflow = \"hidden\";\r\n        window.addEventListener(\"resize\", () => {\r\n            this.refreshG++;\r\n        });\r\n        this.start();\r\n    },\r\n    methods: {\r\n        showText(text) { alert(text); },\r\n        getGridX(i) { return this.game?.grid['x' + i]; },\r\n        getGridY(i) { return this.game?.grid['y' + i]; },\r\n        showCardMouseOver(card) {\r\n            if (this.aside)\r\n                this.showCard(card);\r\n        },\r\n        showCard(card) {\r\n            if (!card)\r\n                this.cardCenter = {\r\n                    id: this.cardCenter.id,\r\n                    position: this.cardCenter.position,\r\n                    to: { ...this.cardCenter.position, height: 0 }\r\n                };\r\n            else\r\n                this.cardCenter = {\r\n                    id: card.id,\r\n                    position: card.position,\r\n                    to: {\r\n                        x: this.game.grid.center.x,\r\n                        y: this.game.grid.center.y,\r\n                        width: this.game.grid.center.width,\r\n                        height: this.game.grid.center.height\r\n                    }\r\n                };\r\n\r\n            const animations = [{ id: 'cardCenter', from: this.cardCenter.position, to: this.cardCenter.to, isIncrement: false }];\r\n            helperAnimation.animateMultiple(animations, 500);\r\n            setTimeout(() => {\r\n                this.cardCenter.position = this.cardCenter.to;\r\n                delete (this.cardCenter.to);\r\n            }, 510);\r\n\r\n        },\r\n        getGridPlace(x, y) {\r\n            return {\r\n                width: this.game?.grid.box.width + 'px', height: this.game?.grid.box.height + 'px',\r\n                left: this.getGridX(x) + 'px', top: this.getGridY(y) + 'px'\r\n            };\r\n        },\r\n        getFieldStyle(x, y, w, h) {\r\n            return {\r\n                width: w + 'px', height: h + 'px',\r\n                left: x + 'px', top: y + 'px'\r\n            };\r\n        },\r\n        start() {\r\n            this.game = gameManager.createGame(gundamManager, this.$vuetify.breakpoint.width, this.$vuetify.breakpoint.height);\r\n            this.refreshGame();\r\n            this.showTitle('Draw phase');\r\n        },\r\n        showTitle(text) {\r\n            this.title = text;\r\n            const animationTime = 250;\r\n            setTimeout(() => { helperAnimation.animate('divTitleParent', { height: 0 }, { height: 100 }, false, animationTime); }, 10);\r\n            setTimeout(() => { helperAnimation.animate('divTitleParent', { height: 100 }, { height: 0 }, false, animationTime); }, 4.5 * (animationTime + 10));\r\n        },\r\n        refreshGame(animate = true) {\r\n            this.cards = this.game.cards;\r\n            setTimeout(() => { this.setDrag(); }, 10);\r\n            this.refreshG++;\r\n            if (animate)\r\n                setTimeout(() => { this.beginAnimation(); }, 1);\r\n        },\r\n        beginAnimation() {\r\n            const cardsToAnimate = this.cards.filter(x => x.to);\r\n            if (cardsToAnimate.length < 1) return;\r\n\r\n            this.freeze = true;\r\n            const animationTime = 500;\r\n            const animations = cardsToAnimate.map(card => { return { id: 'C' + card.index, from: card.position, to: card.to, isIncrement: false }; });\r\n            helperAnimation.animateMultiple(animations, animationTime);\r\n\r\n            setTimeout(() => { this.endAnimation(); }, animationTime + 10);\r\n        },\r\n        endAnimation() {\r\n            this.cards.forEach(card => {\r\n                delete (card.to);\r\n                card.position = card.positionOld ?? card.position;\r\n            });\r\n            //this.gameWorld = gameGundamManager.endAnimation();\r\n            this.freeze = false;\r\n            //this.refreshGame(false);\r\n        },\r\n        nextTurn() {\r\n\r\n        },\r\n        playCardOnZone(card, drop) {\r\n            alert(card.name + ' in ' + drop.zone);\r\n            card.to = this.clone(card.position);\r\n            card.positionOld = this.clone(card.position);\r\n            card.position = { ...card.position, ...card.positionDrag };\r\n            this.beginAnimation();\r\n        },\r\n        playCardOnCard(card, cardDrop) {\r\n            alert(card.name + ' in ' + cardDrop.name);\r\n            card.to = this.clone(card.position);\r\n            card.positionOld = this.clone(card.position);\r\n            card.position = { ...card.position, ...card.positionDrag };\r\n            this.beginAnimation();\r\n        },\r\n        getCard(index) {\r\n            return this.cards.find(x => x.index == index);\r\n        },\r\n        // --------- Drag and drop\r\n        setDrag() {\r\n            this.cards.forEach(card => {\r\n                const id = 'C' + card.index;\r\n                this.addEvent(id, 'dragstart', (event) => this.startDrag(event, card));\r\n                this.addEvent(id, 'dragover', (event) => this.moveCard(event, card));\r\n                this.addEvent(id, 'touchmove', (event) => this.moveCard(event, card));\r\n                this.addEvent(id, 'touchstart', (event) => this.touchStart(event, card));\r\n                this.addEvent(id, 'touchend', (event) => this.touchEnd(event, card));\r\n            });\r\n        },\r\n        addEvent(id, event, action) {\r\n            const element = document.getElementById(id);\r\n            if (element)\r\n                element.addEventListener(event, (event) => action(event));\r\n        },\r\n        moveCard(event, card) {\r\n            if (!card.moving) return;\r\n\r\n            // Gestion du touch ou de la souris\r\n            let x = event.touches ? event.touches[0].clientX : event.clientX;\r\n            let y = event.touches ? event.touches[0].clientY : event.clientY;\r\n\r\n            x -= card.position.width / 2;\r\n            y -= card.position.height / 2;\r\n\r\n            const element = document.getElementById('C' + card.index);\r\n            if (element) {\r\n                element.style.left = `${x}px`;\r\n                element.style.top = `${y}px`;\r\n                card.positionDrag = { x, y };\r\n            }\r\n        },\r\n        startDrag(event, card) {\r\n            event.dataTransfer.dropEffect = 'move';\r\n            event.dataTransfer.effectAllowed = 'move';\r\n            event.dataTransfer.setDragImage(new Image(), 0, 0);\r\n            event.dataTransfer.setData('card', card.index);\r\n            card.moving = true;\r\n            event.target.style.zIndex = \"1000\";\r\n        },\r\n        onDragOver(event) {\r\n            event.preventDefault();\r\n        },\r\n        onDrop(event, drop) {\r\n            event.preventDefault();\r\n            event.target.style.zIndex = \"auto\";\r\n            const data = event.dataTransfer.getData(\"card\");\r\n            const card = this.getCard(data);\r\n            card.moving = false;\r\n            if (drop.zone)\r\n                this.playCardOnZone(card, drop);\r\n            else\r\n                this.playCardOnCard(card, drop);\r\n        },\r\n\r\n\r\n        // --------- Touch\r\n        touchStart(event, card) {\r\n            card.moving = true;\r\n            event.target.style.zIndex = \"1000\";\r\n        },\r\n        touchEnd(event, card) {\r\n            card.moving = false;\r\n            event.target.style.zIndex = \"auto\";\r\n            const touch = event.changedTouches[0];\r\n            let zoneOrCard = this.getTouchZoneOrCard(touch.clientX, touch.clientY);\r\n            if (!zoneOrCard || card.index == zoneOrCard.index)\r\n                return;\r\n\r\n            if (zoneOrCard.zone)\r\n                this.playCardOnZone(card, zoneOrCard);\r\n            else\r\n                this.playCardOnCard(card, zoneOrCard);\r\n        },\r\n        getTouchZoneOrCard(x, y) {\r\n            const card = this.cards.find(card => this.isInside(x, y, card.position));\r\n            const zone = card ? null : this.game.fields.find(zone => this.isInside(x, y, zone));\r\n            return card || zone;\r\n        },\r\n        isInside(x, y, box) {\r\n            const minX = box.x;\r\n            const minY = box.y;\r\n            const maxX = minX + box.width;\r\n            const maxY = minY + box.height;\r\n            return (x >= minX && x <= maxX) && (y >= minY && y <= maxY);\r\n        },\r\n\r\n        // Utils\r\n        clone(obj) { return Object.assign({}, obj); }\r\n    }\r\n}\r\n</script>","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./game.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./game.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./game.vue?vue&type=template&id=27678be9&scoped=true&\"\nimport script from \"./game.vue?vue&type=script&lang=js&\"\nexport * from \"./game.vue?vue&type=script&lang=js&\"\nimport style0 from \"./game.vue?vue&type=style&index=0&id=27678be9&prod&scoped=true&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"27678be9\",\n  null\n  \n)\n\nexport default component.exports","<template>\r\n    <div class=\"bg2 h100p\">\r\n        <menu-bar-gundam :hide=\"true\">\r\n        </menu-bar-gundam>\r\n        <game></game>\r\n    </div>\r\n</template>\r\n<script>\r\nexport default {\r\n    name: 'StyledComponent'\r\n}\r\n</script>\r\n\r\n<script>\r\nimport menuBarGundam from '../../components/menuBarGundam';\r\nimport game from '../../games/game';\r\n\r\n  export default {\r\n  name: 'pageGundamTcgFight',\r\n  components: {menuBarGundam, game},\r\n  data: () => ({ }),\r\n  mounted(){},\r\n  methods: { }\r\n  };\r\n  </script>","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./GundamTcgTest.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./GundamTcgTest.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./GundamTcgTest.vue?vue&type=template&id=2d8eb5c4&\"\nimport script from \"./GundamTcgTest.vue?vue&type=script&lang=js&\"\nexport * from \"./GundamTcgTest.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_c","_self","staticClass","attrs","staticRenderFns","key","i","height","getGridY","width","getGridX","fields","getFieldStyle","name","on","box","staticStyle","_s","card","selectable","$event","showCard","onDragOver","cardCenter","gameTask","static","list","tasks","forEach","task","alreadyInclude","push","find","x","isEqual","task1","task2","isPlayer1","refreshHand","refreshField","_defineProperty","global","location","locationDeck","locationShield","locationHand","locationField","locationBase","locationResource","index","array","filter","includes","concat","cards","sort","Math","random","text","world","logs","obj","Object","assign","positioner","grid","border","divide","widthB","heightB","center","y","boxbig","hand","cardWidth","cardHeight","field","base","createPoint","x15","y8","x0","y7","shield","y9","y6","deck","y10","y5","trash","y11","y4","locationTrash","resource","y12","y3","y13","y0","x1","x14","x2","y1","y2","zone","p1","p2","result","player","isHand","position","clone","positions","cardSize","getCardSize","length","getPositionHand","getPositionField","to","count","desiredWidth","desiredHeight","total","getXCenter","cardWidthHalf","sens","factorRotation","mid","isPair","midX","floor","ceil","abs","playerSens","rotation","round","heightIncruise","ap","hp","totalWidth","elementWidth","halfWidth","half","indexCenter","sizeWidth","gameManager","manager","game","popup","getCards","addTasks","nextTurn","createGrid","player1","player2","getPositions","createField","spawn","createCard","refresh","id","getNextIndex","locationFrom","locationTo","ignore","from","getLocationArrayProperty","removeByIndex","addIn","style","left","top","transform","zindex","cursor","shine","$emit","class","w100p","h100p","bgposition","require","folder","preventDefault","_v","hidestat","_e","props","component","components","gameCard","data","refreshG","aside","freeze","title","mounted","document","body","overflow","window","addEventListener","start","methods","showText","alert","showCardMouseOver","animations","isIncrement","helperAnimation","setTimeout","getGridPlace","w","h","createGame","gundamManager","$vuetify","breakpoint","refreshGame","showTitle","animationTime","animate","setDrag","beginAnimation","cardsToAnimate","map","endAnimation","positionOld","playCardOnZone","drop","positionDrag","playCardOnCard","cardDrop","getCard","addEvent","event","startDrag","moveCard","touchStart","touchEnd","action","element","getElementById","moving","touches","clientX","clientY","dataTransfer","dropEffect","effectAllowed","setDragImage","Image","setData","target","zIndex","onDrop","getData","touch","changedTouches","zoneOrCard","getTouchZoneOrCard","isInside","minX","minY","maxX","maxY","menuBarGundam"],"sourceRoot":""}